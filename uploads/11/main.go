{"content":"package main\nimport (\n\t\"flag\"\n\t\"log\"\n\t\"net/http\"\n\t\"os\"\n)\ntype application struct {\n\terrorLog *log.Logger\n\tinfoLog *log.Logger\n}\n\nfunc main() {\n\taddr := flag.String(\"addr\", \":4000\", \"HTTP network address\")\n\tflag.Parse()\n\tinfoLog := log.New(os.Stdout, \"INFO\\t\", log.Ldate|log.Ltime)\n\terrorLog := log.New(os.Stderr, \"ERROR\\t\", log.Ldate|log.Ltime|log.Lshortfile)\n\n\tapp := &application{\n\t\terrorLog: errorLog,\n\t\tinfoLog: infoLog,\n\t}\nhamza\n\tmux := http.NewServeMux()\n\tmux.HandleFunc(\"/\", app.home)\n\tmux.HandleFunc(\"/snippet\", app.showSnippet)\n\tmux.HandleFunc(\"/snippet/create\", app.createSnippet)\n\tfileServer := http.FileServer(http.Dir(\"./ui/static/\"))\n\tmux.Handle(\"/static/\", http.StripPrefix(\"/static\", fileServer))\n\n\tsrv:=&http.Server{\n\t\tAddr: *addr,\n\t\tErrorLog: errorLog,\n\t\tHandler: mux,\n\t}\n\n\tinfoLog.Printf(\"Starting server on %s\", *addr)\n\n\terr := srv.ListenAndServe()\n\terrorLog.Fatal(err)\n}"}